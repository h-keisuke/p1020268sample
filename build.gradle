buildscript {
	ext {
		kotlinVersion = '1.2.41'
		springBootVersion = '2.0.2.RELEASE'
		junit5Version = '5.2.0'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
		classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
	}
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'com.github.khanamura'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 10

ext["thymeleaf.version"] = "3.0.9.RELEASE"
ext["thymeleaf-layout-dialect.version"] = "2.3.0"

compileKotlin {
	kotlinOptions {
		freeCompilerArgs = ["-Xjsr305=strict"]
		jvmTarget = "1.8"
	}
}
compileTestKotlin {
	kotlinOptions {
		freeCompilerArgs = ["-Xjsr305=strict"]
		jvmTarget = "1.8"
	}
}

repositories {
	mavenCentral()
  jcenter()
}

configurations {
  ktlint
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-thymeleaf')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('com.fasterxml.jackson.module:jackson-module-kotlin')
	compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
	compile("org.jetbrains.kotlin:kotlin-reflect")
  compile("com.fasterxml.jackson.module:jackson-module-kotlin:2.9.5")
  compile("com.github.kittinunf.fuel:fuel:1.13.0")

  ktlint("com.github.shyiko:ktlint:0.23.1")

	testRuntime("org.junit.platform:junit-platform-launcher:1.2.0")
	testCompile("org.junit.jupiter:junit-jupiter-api:${junit5Version}")
	testRuntime("org.junit.jupiter:junit-jupiter-engine:${junit5Version}")
	testCompile('org.springframework.boot:spring-boot-starter-test'){
		exclude module: "junit"
	}
}

test {
	useJUnitPlatform {
		//includeTags 'fast', 'smoke & feature-a'
		// excludeTags 'slow', 'ci'
		includeEngines 'junit-jupiter'
		// excludeEngines 'junit-vintage'
	}
}

task ktlint(type: JavaExec, group: "verification") {
  description = "Check Kotlin code style."
  main = "com.github.shyiko.ktlint.Main"
  classpath = configurations.ktlint
  args "src/**/*.kt"
  // to generate report in checkstyle format prepend following args:
  // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
  // see https://github.com/shyiko/ktlint#usage for more
}
check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
  description = "Fix Kotlin code style deviations."
  main = "com.github.shyiko.ktlint.Main"
  classpath = configurations.ktlint
  args "-F", "src/**/*.kt"
}